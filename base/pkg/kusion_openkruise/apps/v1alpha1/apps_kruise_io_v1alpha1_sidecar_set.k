"""
This file was generated by the KCL auto-gen tool. DO NOT EDIT.
Editing this file might prove futile when you re-run the KCL auto-gen generate command.
"""
import base.pkg.kusion_kubernetes.apimachinery.apis


schema SidecarSet:
    """ SidecarSet is the Schema for the sidecarsets API

    Attributes
    ----------
    __settings__ : {str:str}, default is {"output_type": "STANDALONE"}, optional
         existence of this attribute indicates that the model will be treated standalone by KCLVM.
    apiVersion : str, default is "apps.kruise.io/v1alpha1", required
         APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    kind : str, default is "SidecarSet", required
         Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    metadata : apis.ObjectMeta, default is Undefined, optional
        metadata
    spec : AppsKruiseIoV1alpha1SidecarSetSpec, default is Undefined, optional
        spec
    status : AppsKruiseIoV1alpha1SidecarSetStatus, default is Undefined, optional
        status
    """


    __settings__?: {str:str} = {"output_type": "STANDALONE"}

    apiVersion: "apps.kruise.io/v1alpha1" = "apps.kruise.io/v1alpha1"

    kind: "SidecarSet" = "SidecarSet"

    metadata?: apis.ObjectMeta

    spec?: AppsKruiseIoV1alpha1SidecarSetSpec

    status?: AppsKruiseIoV1alpha1SidecarSetStatus


schema AppsKruiseIoV1alpha1SidecarSetSpec:
    """ SidecarSetSpec defines the desired state of SidecarSet

    Attributes
    ----------
    containers : [AppsKruiseIoV1alpha1SidecarSetSpecContainersItems0], default is Undefined, optional
         Containers is the list of sidecar containers to be injected into the selected pod
    initContainers : [AppsKruiseIoV1alpha1SidecarSetSpecInitContainersItems0], default is Undefined, optional
         Containers is the list of init containers to be injected into the selected pod We will inject those containers by their name in ascending order We only inject init containers when a new pod is created, it does not apply to any existing pod
    namespace : str, default is Undefined, optional
         Namespace sidecarSet will only match the pods in the namespace otherwise, match pods in all namespaces(in cluster)
    volumes : [any], default is Undefined, optional
         List of volumes that can be mounted by sidecar containers
    selector : AppsKruiseIoV1alpha1SidecarSetSpecSelector, default is Undefined, optional
        selector
    updateStrategy : AppsKruiseIoV1alpha1SidecarSetSpecUpdateStrategy, default is Undefined, optional
        update strategy
    """


    containers?: [AppsKruiseIoV1alpha1SidecarSetSpecContainersItems0]

    initContainers?: [AppsKruiseIoV1alpha1SidecarSetSpecInitContainersItems0]

    namespace?: str

    volumes?: [any]

    selector?: AppsKruiseIoV1alpha1SidecarSetSpecSelector

    updateStrategy?: AppsKruiseIoV1alpha1SidecarSetSpecUpdateStrategy


schema AppsKruiseIoV1alpha1SidecarSetSpecContainersItems0:
    """ SidecarContainer defines the container of Sidecar

    Attributes
    ----------
    podInjectPolicy : str, default is Undefined, optional
         The rules that injected SidecarContainer into Pod.spec.containers, not takes effect in initContainers If BeforeAppContainer, the SidecarContainer will be injected in front of the pod.spec.containers otherwise it will be injected into the back. default BeforeAppContainerType
    shareVolumePolicy : AppsKruiseIoV1alpha1SidecarSetSpecContainersItems0ShareVolumePolicy, default is Undefined, optional
        share volume policy
    transferEnv : [AppsKruiseIoV1alpha1SidecarSetSpecContainersItems0TransferEnvItems0], default is Undefined, optional
         TransferEnv will transfer env info from other container SourceContainerName is pod.spec.container[x].name; EnvName is pod.spec.container[x].Env.name
    upgradeStrategy : AppsKruiseIoV1alpha1SidecarSetSpecContainersItems0UpgradeStrategy, default is Undefined, optional
        upgrade strategy
    """


    podInjectPolicy?: str

    shareVolumePolicy?: AppsKruiseIoV1alpha1SidecarSetSpecContainersItems0ShareVolumePolicy

    transferEnv?: [AppsKruiseIoV1alpha1SidecarSetSpecContainersItems0TransferEnvItems0]

    upgradeStrategy?: AppsKruiseIoV1alpha1SidecarSetSpecContainersItems0UpgradeStrategy


schema AppsKruiseIoV1alpha1SidecarSetSpecContainersItems0ShareVolumePolicy:
    """ If ShareVolumePolicy is enabled, the sidecar container will share the other container's VolumeMounts in the pod(don't contains the injected sidecar container).

    Attributes
    ----------
    $type : str, default is Undefined, optional
        type
    """


    $type?: str


schema AppsKruiseIoV1alpha1SidecarSetSpecContainersItems0TransferEnvItems0:
    """apps kruise io v1alpha1 sidecar set spec containers items0 transfer env items0

    Attributes
    ----------
    envName : str, default is Undefined, optional
        env name
    sourceContainerName : str, default is Undefined, optional
        source container name
    """


    envName?: str

    sourceContainerName?: str


schema AppsKruiseIoV1alpha1SidecarSetSpecContainersItems0UpgradeStrategy:
    """ sidecarContainer upgrade strategy, include: ColdUpgrade, HotUpgrade

    Attributes
    ----------
    hotUpgradeEmptyImage : str, default is Undefined, optional
         when HotUpgrade, HotUpgradeEmptyImage is used to complete the hot upgrading process HotUpgradeEmptyImage is consistent of sidecar container in Command, Args, Liveness probe, etc. but it does no actual work.
    upgradeType : str, default is Undefined, optional
         when sidecar container is stateless, use ColdUpgrade otherwise HotUpgrade are more HotUpgrade. examples for istio envoy container is suitable for HotUpgrade default is ColdUpgrade
    """


    hotUpgradeEmptyImage?: str

    upgradeType?: str


schema AppsKruiseIoV1alpha1SidecarSetSpecInitContainersItems0:
    """ SidecarContainer defines the container of Sidecar

    Attributes
    ----------
    podInjectPolicy : str, default is Undefined, optional
         The rules that injected SidecarContainer into Pod.spec.containers, not takes effect in initContainers If BeforeAppContainer, the SidecarContainer will be injected in front of the pod.spec.containers otherwise it will be injected into the back. default BeforeAppContainerType
    shareVolumePolicy : AppsKruiseIoV1alpha1SidecarSetSpecInitContainersItems0ShareVolumePolicy, default is Undefined, optional
        share volume policy
    transferEnv : [AppsKruiseIoV1alpha1SidecarSetSpecInitContainersItems0TransferEnvItems0], default is Undefined, optional
         TransferEnv will transfer env info from other container SourceContainerName is pod.spec.container[x].name; EnvName is pod.spec.container[x].Env.name
    upgradeStrategy : AppsKruiseIoV1alpha1SidecarSetSpecInitContainersItems0UpgradeStrategy, default is Undefined, optional
        upgrade strategy
    """


    podInjectPolicy?: str

    shareVolumePolicy?: AppsKruiseIoV1alpha1SidecarSetSpecInitContainersItems0ShareVolumePolicy

    transferEnv?: [AppsKruiseIoV1alpha1SidecarSetSpecInitContainersItems0TransferEnvItems0]

    upgradeStrategy?: AppsKruiseIoV1alpha1SidecarSetSpecInitContainersItems0UpgradeStrategy


schema AppsKruiseIoV1alpha1SidecarSetSpecInitContainersItems0ShareVolumePolicy:
    """ If ShareVolumePolicy is enabled, the sidecar container will share the other container's VolumeMounts in the pod(don't contains the injected sidecar container).

    Attributes
    ----------
    $type : str, default is Undefined, optional
        type
    """


    $type?: str


schema AppsKruiseIoV1alpha1SidecarSetSpecInitContainersItems0TransferEnvItems0:
    """apps kruise io v1alpha1 sidecar set spec init containers items0 transfer env items0

    Attributes
    ----------
    envName : str, default is Undefined, optional
        env name
    sourceContainerName : str, default is Undefined, optional
        source container name
    """


    envName?: str

    sourceContainerName?: str


schema AppsKruiseIoV1alpha1SidecarSetSpecInitContainersItems0UpgradeStrategy:
    """ sidecarContainer upgrade strategy, include: ColdUpgrade, HotUpgrade

    Attributes
    ----------
    hotUpgradeEmptyImage : str, default is Undefined, optional
         when HotUpgrade, HotUpgradeEmptyImage is used to complete the hot upgrading process HotUpgradeEmptyImage is consistent of sidecar container in Command, Args, Liveness probe, etc. but it does no actual work.
    upgradeType : str, default is Undefined, optional
         when sidecar container is stateless, use ColdUpgrade otherwise HotUpgrade are more HotUpgrade. examples for istio envoy container is suitable for HotUpgrade default is ColdUpgrade
    """


    hotUpgradeEmptyImage?: str

    upgradeType?: str


schema AppsKruiseIoV1alpha1SidecarSetSpecSelector:
    """ selector is a label query over pods that should be injected

    Attributes
    ----------
    matchExpressions : [AppsKruiseIoV1alpha1SidecarSetSpecSelectorMatchExpressionsItems0], default is Undefined, optional
         matchExpressions is a list of label selector requirements. The requirements are ANDed.
    matchLabels : {str:str}, default is Undefined, optional
         matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
    """


    matchExpressions?: [AppsKruiseIoV1alpha1SidecarSetSpecSelectorMatchExpressionsItems0]

    matchLabels?: {str:str}


schema AppsKruiseIoV1alpha1SidecarSetSpecSelectorMatchExpressionsItems0:
    """ A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.

    Attributes
    ----------
    key : str, default is Undefined, required
         key is the label key that the selector applies to.
    operator : str, default is Undefined, required
         operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
    values : [str], default is Undefined, optional
         values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
    """


    key: str

    operator: str

    values?: [str]


schema AppsKruiseIoV1alpha1SidecarSetSpecUpdateStrategy:
    """ The sidecarset updateStrategy to use to replace existing pods with new ones.

    Attributes
    ----------
    maxUnavailable : int, default is Undefined, optional
         The maximum number of SidecarSet pods that can be unavailable during the update. Value can be an absolute number (ex: 5) or a percentage of total number of SidecarSet pods at the start of the update (ex: 10%). Absolute number is calculated from percentage by rounding up. This cannot be 0. Default value is 1.
    partition : int, default is Undefined, optional
         Partition is the desired number of pods in old revisions. It means when partition is set during pods updating, (replicas - partition) number of pods will be updated. Default value is 0.
    paused : bool, default is Undefined, optional
         Paused indicates that the SidecarSet is paused to update the injected pods, but it don't affect the webhook inject sidecar container into the newly created pods. default is false
    scatterStrategy : [AppsKruiseIoV1alpha1SidecarSetSpecUpdateStrategyScatterStrategyItems0], default is Undefined, optional
         ScatterStrategy defines the scatter rules to make pods been scattered when update. This will avoid pods with the same key-value to be updated in one batch. - Note that pods will be scattered after priority sort. So, although priority strategy and scatter strategy can be applied together, we suggest to use either one of them. - If scatterStrategy is used, we suggest to just use one term. Otherwise, the update order can be hard to understand.
    $type : str, default is Undefined, optional
         Type is NotUpdate, the SidecarSet don't update the injected pods, it will only inject sidecar container into the newly created pods. Type is RollingUpdate, the SidecarSet will update the injected pods to the latest version on RollingUpdate Strategy. default is RollingUpdate
    selector : AppsKruiseIoV1alpha1SidecarSetSpecUpdateStrategySelector, default is Undefined, optional
        selector
    """


    maxUnavailable?: int

    partition?: int

    paused?: bool

    scatterStrategy?: [AppsKruiseIoV1alpha1SidecarSetSpecUpdateStrategyScatterStrategyItems0]

    $type?: str

    selector?: AppsKruiseIoV1alpha1SidecarSetSpecUpdateStrategySelector


schema AppsKruiseIoV1alpha1SidecarSetSpecUpdateStrategyScatterStrategyItems0:
    """apps kruise io v1alpha1 sidecar set spec update strategy scatter strategy items0

    Attributes
    ----------
    key : str, default is Undefined, required
        key
    value : str, default is Undefined, required
        value
    """


    key: str

    value: str


schema AppsKruiseIoV1alpha1SidecarSetSpecUpdateStrategySelector:
    """ If selector is not nil, this upgrade will only update the selected pods.

    Attributes
    ----------
    matchExpressions : [AppsKruiseIoV1alpha1SidecarSetSpecUpdateStrategySelectorMatchExpressionsItems0], default is Undefined, optional
         matchExpressions is a list of label selector requirements. The requirements are ANDed.
    matchLabels : {str:str}, default is Undefined, optional
         matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
    """


    matchExpressions?: [AppsKruiseIoV1alpha1SidecarSetSpecUpdateStrategySelectorMatchExpressionsItems0]

    matchLabels?: {str:str}


schema AppsKruiseIoV1alpha1SidecarSetSpecUpdateStrategySelectorMatchExpressionsItems0:
    """ A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.

    Attributes
    ----------
    key : str, default is Undefined, required
         key is the label key that the selector applies to.
    operator : str, default is Undefined, required
         operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
    values : [str], default is Undefined, optional
         values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
    """


    key: str

    operator: str

    values?: [str]


schema AppsKruiseIoV1alpha1SidecarSetStatus:
    """ SidecarSetStatus defines the observed state of SidecarSet

    Attributes
    ----------
    matchedPods : int, default is Undefined, required
         matchedPods is the number of Pods whose labels are matched with this SidecarSet's selector and are created after sidecarset creates
    observedGeneration : int, default is Undefined, optional
         observedGeneration is the most recent generation observed for this SidecarSet. It corresponds to the SidecarSet's generation, which is updated on mutation by the API Server.
    readyPods : int, default is Undefined, required
         readyPods is the number of matched Pods that have a ready condition
    updatedPods : int, default is Undefined, required
         updatedPods is the number of matched Pods that are injected with the latest SidecarSet's containers
    updatedReadyPods : int, default is Undefined, optional
         updatedReadyPods is the number of matched pods that updated and ready
    """


    matchedPods: int

    observedGeneration?: int

    readyPods: int

    updatedPods: int

    updatedReadyPods?: int


