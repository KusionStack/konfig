"""
This file was generated by the KCL auto-gen tool. DO NOT EDIT.
Editing this file might prove futile when you re-run the KCL auto-gen generate command.
"""
import base.pkg.kusion_kubernetes.apimachinery.apis
import base.pkg.kusion_kubernetes.api.core.v1
import regex


schema AlertmanagerSpec:
    """ Specification of the desired behavior of the Alertmanager cluster. More info: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#spec-and-status

    Attributes
    ----------
    additionalPeers: [str], default is Undefined, optional
        AdditionalPeers allows injecting a set of additional Alertmanagers to peer with to form a highly available cluster.
    baseImage: str, default is Undefined, optional
        Base image that is used to deploy pods, without tag. Deprecated: use 'image' instead
    clusterAdvertiseAddress: str, default is Undefined, optional
        ClusterAdvertiseAddress is the explicit address to advertise in cluster. Needs to be provided for non RFC1918 [1] (public) addresses. [1] RFC1918: https://tools.ietf.org/html/rfc1918
    clusterGossipInterval: str, default is Undefined, optional
        Interval between gossip attempts.
    clusterPeerTimeout: str, default is Undefined, optional
        Timeout for cluster peering.
    clusterPushpullInterval: str, default is Undefined, optional
        Interval between pushpull attempts.
    configMaps: [str], default is Undefined, optional
        ConfigMaps is a list of ConfigMaps in the same namespace as the Alertmanager object, which shall be mounted into the Alertmanager Pods. Each ConfigMap is added to the StatefulSet definition as a volume named `configmap-<configmap-name>`. The ConfigMaps are mounted into /etc/alertmanager/configmaps/<configmap-name> in the 'alertmanager' container.
    configSecret: str, default is Undefined, optional
        ConfigSecret is the name of a Kubernetes Secret in the same namespace as the Alertmanager object, which contains the configuration for this Alertmanager instance. If empty, it defaults to 'alertmanager-<alertmanager-name>'. 
        The Alertmanager configuration should be available under the `alertmanager.yaml` key. Additional keys from the original secret are copied to the generated secret.
        If either the secret or the `alertmanager.yaml` key is missing, the operator provisions an Alertmanager configuration with one empty receiver (effectively dropping alert notifications).
    containers: [v1.Container], default is Undefined, optional
        Containers allows injecting additional containers. This is meant to allow adding an authentication proxy to an Alertmanager pod. Containers described here modify an operator generated container if they share the same name and modifications are done via a strategic merge patch. The current container names are: `alertmanager` and `config-reloader`. Overriding containers is entirely outside the scope of what the maintainers will support and by doing so, you accept that this behaviour may break at any time without notice.
    externalUrl: str, default is Undefined, optional
        The external URL the Alertmanager instances will be available under. This is necessary to generate correct URLs. This is necessary if Alertmanager is not served from root of a DNS name.
    forceEnableClusterMode: bool, default is Undefined, optional
        ForceEnableClusterMode ensures Alertmanager does not deactivate the cluster mode when running with a single replica. Use case is e.g. spanning an Alertmanager cluster across Kubernetes clusters with a single replica in each.
    hostAliases: [HostAlias], default is Undefined, optional
        Pods' hostAliases configuration
    image: str, default is Undefined, optional
        Image if specified has precedence over baseImage, tag and sha combinations. Specifying the version is still necessary to ensure the Prometheus Operator knows what version of Alertmanager is being configured.
    imagePullSecrets: [v1.LocalObjectReference], default is Undefined, optional
        An optional list of references to secrets in the same namespace to use for pulling prometheus and alertmanager images from registries see http://kubernetes.io/docs/user-guide/images#specifying-imagepullsecrets-on-a-pod
    initContainers: [v1.Container], default is Undefined, optional
        InitContainers allows adding initContainers to the pod definition. Those can be used to e.g. fetch secrets for injection into the Alertmanager configuration from external sources. Any errors during the execution of an initContainer will lead to a restart of the Pod. More info: https://kubernetes.io/docs/concepts/workloads/pods/init-containers/ Using initContainers for any use case other then secret fetching is entirely outside the scope of what the maintainers will support and by doing so, you accept that this behaviour may break at any time without notice.
    listenLocal: bool, default is Undefined, optional
        ListenLocal makes the Alertmanager server listen on loopback, so that it does not bind against the Pod IP. Note this is only for the Alertmanager UI, not the gossip communication.
    logFormat: "" | "logfmt" | "json", default is Undefined, optional
        Log format for Alertmanager to be configured with.
    logLevel: "" | "debug" | "info" | "warn" | "error", default is Undefined, optional
        Log level for Alertmanager to be configured with.
    minReadySeconds: int, default is Undefined, optional
        Minimum number of seconds for which a newly created pod should be ready without any of its container crashing for it to be considered available. Defaults to 0 (pod will be considered available as soon as it is ready) This is an alpha field and requires enabling StatefulSetMinReadySeconds feature gate.
    nodeSelector: {str:str}, default is Undefined, optional
        Define which Nodes the Pods are scheduled on.
    paused: bool, default is Undefined, optional
        If set to true all actions on the underlying managed objects are not goint to be performed, except for delete actions.
    portName: str, default is Undefined, optional
        Port name used for the pods and governing service. This defaults to web
    priorityClassName: str, default is Undefined, optional
        Priority class assigned to the Pods
    replicas: int, default is Undefined, optional
        Size is the expected size of the alertmanager cluster. The controller will eventually make the size of the running cluster equal to the expected size.
    retention: str, default is "120h", optional
        Time duration Alertmanager shall retain data for. Default is '120h', and must match the regular expression `[0-9]+(ms|s|m|h)` (milliseconds seconds minutes hours).
    routePrefix: str, default is Undefined, optional
        The route prefix Alertmanager registers HTTP handlers for. This is useful, if using ExternalURL and a proxy is rewriting HTTP routes of a request, and the actual ExternalURL is still true, but the server serves requests under a different route prefix. For example for use with `kubectl proxy`.
    secrets: [str], default is Undefined, optional
        Secrets is a list of Secrets in the same namespace as the Alertmanager object, which shall be mounted into the Alertmanager Pods. Each Secret is added to the StatefulSet definition as a volume named `secret-<secret-name>`. The Secrets are mounted into /etc/alertmanager/secrets/<secret-name> in the 'alertmanager' container.
    serviceAccountName: str, default is Undefined, optional
        ServiceAccountName is the name of the ServiceAccount to use to run the Prometheus Pods.
    sha: str, default is Undefined, optional
        SHA of Alertmanager container image to be deployed. Defaults to the value of `version`. Similar to a tag, but the SHA explicitly deploys an immutable container image. Version and Tag are ignored if SHA is set. Deprecated: use 'image' instead.  The image digest can be specified as part of the image URL.
    tag: str, default is Undefined, optional
        Tag of Alertmanager container image to be deployed. Defaults to the value of `version`. Version is ignored if Tag is set. Deprecated: use 'image' instead.  The image tag can be specified as part of the image URL.
    tolerations: [v1.Toleration], default is Undefined, optional
        If specified, the pod's tolerations.
    topologySpreadConstraints: [v1.TopologySpreadConstraint], default is Undefined, optional
        If specified, the pod's topology spread constraints.
    version: str, default is Undefined, optional
        Version the cluster should be on.
    volumeMounts: [v1.VolumeMount], default is Undefined, optional
        VolumeMounts allows configuration of additional VolumeMounts on the output StatefulSet definition. VolumeMounts specified will be appended to other VolumeMounts in the alertmanager container, that are generated as a result of StorageSpec objects.
    volumes: [v1.Volume], default is Undefined, optional
        Volumes allows configuration of additional volumes on the output StatefulSet definition. Volumes specified will be appended to other volumes that are generated as a result of StorageSpec objects.
    affinity: v1.Affinity, default is Undefined, optional
        affinity
    alertmanagerConfigNamespaceSelector: apis.LabelSelector, default is Undefined, optional
        alertmanager config namespace selector
    alertmanagerConfigSelector: apis.LabelSelector, default is Undefined, optional
        alertmanager config selector
    alertmanagerConfiguration: AlertmanagerConfiguration, default is Undefined, optional
        alertmanager configuration
    podMetadata: EmbeddedObjectMetadata, default is Undefined, optional
        pod metadata
    resources: v1.ResourceRequirements, default is Undefined, optional
        resources
    securityContext: v1.PodSecurityContext, default is Undefined, optional
        security context
    storage: StorageSpec, default is Undefined, optional
        storage
    web: AlertmanagerWebSpec, default is Undefined, optional
        web
    """


    additionalPeers?: [str]

    baseImage?: str

    clusterAdvertiseAddress?: str

    clusterGossipInterval?: str

    clusterPeerTimeout?: str

    clusterPushpullInterval?: str

    configMaps?: [str]

    configSecret?: str

    containers?: [v1.Container]

    externalUrl?: str

    forceEnableClusterMode?: bool

    hostAliases?: [HostAlias]

    image?: str

    imagePullSecrets?: [v1.LocalObjectReference]

    initContainers?: [v1.Container]

    listenLocal?: bool

    logFormat?: "" | "logfmt" | "json"

    logLevel?: "" | "debug" | "info" | "warn" | "error"

    minReadySeconds?: int

    nodeSelector?: {str:str}

    paused?: bool

    portName?: str

    priorityClassName?: str

    replicas?: int

    retention?: str = "120h"

    routePrefix?: str

    secrets?: [str]

    serviceAccountName?: str

    sha?: str

    tag?: str

    tolerations?: [v1.Toleration]

    topologySpreadConstraints?: [v1.TopologySpreadConstraint]

    version?: str

    volumeMounts?: [v1.VolumeMount]

    volumes?: [v1.Volume]

    affinity?: v1.Affinity

    alertmanagerConfigNamespaceSelector?: apis.LabelSelector

    alertmanagerConfigSelector?: apis.LabelSelector

    alertmanagerConfiguration?: AlertmanagerConfiguration

    podMetadata?: EmbeddedObjectMetadata

    resources?: v1.ResourceRequirements

    securityContext?: v1.PodSecurityContext

    storage?: StorageSpec

    web?: AlertmanagerWebSpec


    check:
        regex.match(clusterGossipInterval, r"^(0|(([0-9]+)h)?(([0-9]+)m)?(([0-9]+)s)?(([0-9]+)ms)?)$") if clusterGossipInterval
        regex.match(clusterPeerTimeout, r"^(0|(([0-9]+)h)?(([0-9]+)m)?(([0-9]+)s)?(([0-9]+)ms)?)$") if clusterPeerTimeout
        regex.match(clusterPushpullInterval, r"^(0|(([0-9]+)h)?(([0-9]+)m)?(([0-9]+)s)?(([0-9]+)ms)?)$") if clusterPushpullInterval
        regex.match(retention, r"^(0|(([0-9]+)h)?(([0-9]+)m)?(([0-9]+)s)?(([0-9]+)ms)?)$") if retention
