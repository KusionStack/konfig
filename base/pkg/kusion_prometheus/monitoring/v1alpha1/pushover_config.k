"""
This file was generated by the KCL auto-gen tool. DO NOT EDIT.
Editing this file might prove futile when you re-run the KCL auto-gen generate command.
"""
import base.pkg.kusion_kubernetes.api.core.v1 as corev1
import regex


schema PushoverConfig:
    """ PushoverConfig configures notifications via Pushover. See https://prometheus.io/docs/alerting/latest/configuration/#pushover_config

    Attributes
    ----------
    expire: str, default is Undefined, optional
        How long your notification will continue to be retried for, unless the user acknowledges the notification.
    html: bool, default is Undefined, optional
        Whether notification message is HTML or plain text.
    httpConfig: HTTPConfig, default is Undefined, optional
        http config
    message: str, default is Undefined, optional
        Notification message.
    priority: str, default is Undefined, optional
        Priority, see https://pushover.net/api#priority
    retry: str, default is Undefined, optional
        How often the Pushover servers will send the same notification to the user. Must be at least 30 seconds.
    sendResolved: bool, default is Undefined, optional
        Whether or not to notify about resolved alerts.
    sound: str, default is Undefined, optional
        The name of one of the sounds supported by device clients to override the user's default sound choice
    title: str, default is Undefined, optional
        Notification title.
    token: corev1.SecretKeySelector, default is Undefined, optional
        token
    url: str, default is Undefined, optional
        A supplementary URL shown alongside the message.
    urlTitle: str, default is Undefined, optional
        A title for supplementary URL, otherwise just the URL is shown
    userKey: corev1.SecretKeySelector, default is Undefined, optional
        user key
    """


    expire?: str

    html?: bool

    httpConfig?: HTTPConfig

    message?: str

    priority?: str

    retry?: str

    sendResolved?: bool

    sound?: str

    title?: str

    token?: corev1.SecretKeySelector

    url?: str

    urlTitle?: str

    userKey?: corev1.SecretKeySelector


    check:
        regex.match(expire, r"^(([0-9]+)y)?(([0-9]+)w)?(([0-9]+)d)?(([0-9]+)h)?(([0-9]+)m)?(([0-9]+)s)?(([0-9]+)ms)?$") if expire
        regex.match(retry, r"^(([0-9]+)y)?(([0-9]+)w)?(([0-9]+)d)?(([0-9]+)h)?(([0-9]+)m)?(([0-9]+)s)?(([0-9]+)ms)?$") if retry
